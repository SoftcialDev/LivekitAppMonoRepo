// 1. Datasource & Generator
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // e.g. postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=publi
}

generator client {
  provider = "prisma-client-js" // Generates a type-safe JavaScript/TypeScript client
}

// 2. Enumerations

/// Distinguishes between super administrators, administrators, and employees.
enum UserRole {
  /// Highest privileges: can manage admins and all settings.
  SuperAdmin
  /// Can manage employees and day-to-day operations.
  Admin
  /// Standard user with limited permissions.
  Employee
}

/// A user’s presence status.
enum Status {
  online
  offline
}

// 3. Models

/// Represents an authenticated application user from Azure AD.
model User {
  /// Primary key: UUID generated by PostgreSQL.
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// Unique Azure AD object identifier.
  azureAdObjectId   String              @unique
  /// User’s email address.
  email             String              @unique
  /// Full name for display.
  fullName          String
  /// Role in the system: SuperAdmin, Admin, or Employee.
  role              UserRole
  /// Timestamp when the role was last changed (e.g. promotion/demotion).
  roleChangedAt     DateTime?
  /// (Optional) Reference to the User who is this user’s admin.
  adminId           String?             @db.Uuid
  /// Timestamp when this user was assigned to the current admin.
  assignedAt        DateTime?
  /// Relation to the admin User.
  admin             User?               @relation("AdminToEmployees", fields: [adminId], references: [id])
  /// Inverse relation: employees managed by this admin.
  employees         User[]              @relation("AdminToEmployees")
  /// Current presence status (online/offline).
  presence          Presence?
  /// History of presence intervals via WebSocket connections.
  presenceHistory   PresenceHistory[]
  /// Timestamp when the user was created.
  createdAt         DateTime            @default(now())
  /// Timestamp when the user was last updated.
  updatedAt         DateTime            @updatedAt
  /// Soft-delete timestamp; set when the user is deleted.
  deletedAt         DateTime?

  @@index([adminId]) // Speeds up queries by admin
}

/// Tracks current online/offline status for a user.
/// One row per user when presence is tracked.
model Presence {
  /// User ID (also primary key), cascades on delete.
  userId     String   @id @db.Uuid
  /// Relation back to the User model.
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// Current status: online or offline.
  status     Status
  /// Timestamp of the last activity or disconnect.
  lastSeenAt DateTime
  /// Automatically updates whenever this record changes.
  updatedAt  DateTime @updatedAt

  @@index([status]) // For efficient lookup by status
}

/// Records intervals of WebSocket connection for presence history.
/// Each time a user connects/disconnects, an entry is created/updated.
model PresenceHistory {
  /// Primary key: UUID generated by PostgreSQL.
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  /// Reference to the User.
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @db.Uuid
  /// When the WS connection started.
  connectedAt   DateTime @default(now())
  /// When the WS connection ended; null if still connected.
  disconnectedAt DateTime?
  /// Automatically updates on change (e.g., when disconnectedAt is set).
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([connectedAt])
}

model PendingCommand {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employeeEmail String
  command       String   // "START" | "STOP"
  timestamp     DateTime
  delivered     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

