---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  labels:
    app: redis
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      volumes:
        - name: data
          emptyDir: {}
        - name: config
          configMap:
            name: redis-config
            items:
            - key: redis-config
              path: redis.conf
      containers:
        - name: redis
          image: redis
          command:
            - redis-server
            - "/redis-master/redis.conf"
          env:
          - name: MASTER
            value: "true"
          ports:
          - containerPort: 6379
          volumeMounts:
            - mountPath: /redis-master-data
              name: data
            - mountPath: /redis-master
              name: config

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
  name: redis
spec:
  ports:
    - port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    app: redis
  clusterIP: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
data:
  redis-config: |
    bind 0.0.0.0
---
# Livekit server config
apiVersion: v1
kind: ConfigMap
metadata:
  name: livekit-server
data:
  config.yaml: |
    keys:
      access_token: secret
    log_level: debug
    port: 7880
    redis:
      address: redis:6379
    rtc:
      port_range_end: 60000
      port_range_start: 50000
      tcp_port: 7801
      turn_servers:
        - credential: pass-1
          host: 134.33.230.77
          port: 3478
          protocol: udp
          username: user-1
      use_external_ip: false
    turn:
      enabled: false

---
# 3) Service para LiveKit
apiVersion: v1
kind: Service
metadata:
  name: livekit-server
  labels:
    app.kubernetes.io/name: livekit-server
    app.kubernetes.io/instance: livekit
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 443
      targetPort: 7880
      protocol: TCP
    - name: rtc-tcp
      port: 7801
      targetPort: 7801
      protocol: TCP
  selector:
    app.kubernetes.io/name: livekit-server
    app.kubernetes.io/instance: livekit

---
# 4) Deployment de LiveKit
apiVersion: apps/v1
kind: Deployment
metadata:
  name: livekit-server
  labels:
    app.kubernetes.io/name: livekit-server
    app.kubernetes.io/instance: livekit
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: livekit-server
      app.kubernetes.io/instance: livekit
  template:
    metadata:
      annotations:
        linkerd.io/inject: disabled
        sidecar.istio.io/inject: "false"
      labels:
        app.kubernetes.io/name: livekit-server
        app.kubernetes.io/instance: livekit
    spec:
      terminationGracePeriodSeconds: 18000 # 5 hours
      containers:
        - name: livekit-server
          image: livekit/livekit-server:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: LIVEKIT_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: livekit-server
                  key: config.yaml
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "2000m"
              memory: "2Gi"
          ports:
            - name: http
              containerPort: 7880
              protocol: TCP
            - name: rtc-tcp
              containerPort: 7801
              protocol: TCP

---
# ingress for livekit
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: livekit-ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - livekit.xyzhub.pw
      secretName: livekit-tls
  rules:
    - host: livekit.xyzhub.pw
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: livekit-server
                port:
                  number: 443

---
# 6) UDPRoute para STUNner
apiVersion: stunner.l7mp.io/v1
kind: UDPRoute
metadata:
  name: livekit-agent
  namespace: stunner
spec:
  parentRefs:
    - name: webrtc-gateway
  rules:
    - backendRefs:
        - name: livekit-server
          namespace: default
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: livekit-server-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: livekit-server
  minReplicas: 1
  maxReplicas: 3
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: livekit-egress
data:
  config.yaml: |
    ws_url: wss://livekit.xyzhub.pw
    api_key: access_token
    api_secret: secret
    redis:
      address: redis:6379
    azure:
      container_name: recordings
    log_level: info

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: livekit-egress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: livekit-egress
  template:
    metadata:
      labels:
        app: livekit-egress
    spec:
      containers:
        - name: livekit-egress
          image: livekit/egress:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: EGRESS_CONFIG_FILE
              value: /config/config.yaml
            - name: AZURE_STORAGE_ACCOUNT
              valueFrom:
                secretKeyRef:
                  name: livekit-blobstorage-secret
                  key: AZURE_STORAGE_ACCOUNT
            - name: AZURE_STORAGE_KEY
              valueFrom:
                secretKeyRef:
                  name: livekit-blobstorage-secret
                  key: AZURE_STORAGE_KEY
          securityContext:
            capabilities:
              add: ["SYS_ADMIN"]
          volumeMounts:
            - name: config
              mountPath: /config
      volumes:
        - name: config
          configMap:
            name: livekit-egress
